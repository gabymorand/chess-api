{
  "info": {
    "name": "‚ôüÔ∏è Chess API - LOCAL COMPLETE TEST",
    "description": "Test exhaustif de tous les endpoints en local",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user2_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "game_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "move_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "tournament_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "comment_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üíö 0. HEALTH CHECK",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health Check OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "console.log('üü¢ Health:', pm.response.text());"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          }
        }
      ]
    },
    {
      "name": "üîê 1. AUTH ENDPOINTS",
      "item": [
        {
          "name": "Register User 1 (ADMIN)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== REGISTER USER 1 ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.token) {",
                  "            pm.collectionVariables.set('jwt_token', response.token);",
                  "            console.log('‚úÖ JWT saved');",
                  "        }",
                  "        if (response.user && response.user.id) {",
                  "            pm.collectionVariables.set('user_id', response.user.id);",
                  "            console.log('‚úÖ User ID saved:', response.user.id);",
                  "        }",
                  "    } catch (e) {",
                  "        console.log('‚ùå Parse error:', e);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Register User 1', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 409]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin{{$timestamp}}\",\n  \"email\": \"admin{{$timestamp}}@test.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"role\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Register User 2 (USER)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== REGISTER USER 2 ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.user && response.user.id) {",
                  "            pm.collectionVariables.set('user2_id', response.user.id);",
                  "            console.log('‚úÖ User 2 ID saved:', response.user.id);",
                  "        }",
                  "    } catch (e) {",
                  "        console.log('‚ùå Parse error:', e);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Register User 2', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 409]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"player{{$timestamp}}\",\n  \"email\": \"player{{$timestamp}}@test.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"Player\",\n  \"lastName\": \"Two\",\n  \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Login User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== LOGIN ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Login attempt', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin123\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• 2. USER ENDPOINTS",
      "item": [
        {
          "name": "Get All Users (PUBLIC)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET ALL USERS ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get all users', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Get User by ID (PUBLIC)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET USER BY ID ===');",
                  "console.log('URL:', pm.request.url.toString());",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get user by ID', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 403]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/1",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "1"]
            }
          }
        },
        {
          "name": "Get User by ID (WITH JWT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET USER BY ID (JWT) ===');",
                  "console.log('JWT:', pm.collectionVariables.get('jwt_token') ? 'SET' : 'NOT SET');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get user by ID with JWT', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 403]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/{{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{user_id}}"]
            }
          }
        },
        {
          "name": "Create User (ADMIN endpoint)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== CREATE USER (ADMIN) ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Create user (admin)', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser{{$timestamp}}\",\n  \"email\": \"new{{$timestamp}}@test.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"New\",\n  \"lastName\": \"User\",\n  \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            }
          }
        }
      ]
    },
    {
      "name": "‚ôüÔ∏è 3. GAME ENDPOINTS",
      "item": [
        {
          "name": "Get All Games (PUBLIC)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET ALL GAMES ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get all games', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/games",
              "host": ["{{base_url}}"],
              "path": ["api", "games"]
            }
          }
        },
        {
          "name": "Create Game (WITH JWT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== CREATE GAME ===');",
                  "console.log('JWT:', pm.collectionVariables.get('jwt_token') ? 'SET' : 'NOT SET');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    try {",
                  "        const response = pm.response.json();",
                  "        if (response.id) {",
                  "            pm.collectionVariables.set('game_id', response.id);",
                  "            console.log('‚úÖ Game ID saved:', response.id);",
                  "        }",
                  "    } catch (e) {",
                  "        console.log('‚ùå Parse error:', e);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Create game', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 403]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"playerWhiteId\": 1,\n  \"playerBlackId\": 2,\n  \"timeControl\": \"BLITZ\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/games",
              "host": ["{{base_url}}"],
              "path": ["api", "games"]
            }
          }
        },
        {
          "name": "Get Game by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET GAME BY ID ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get game by ID', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/games/1",
              "host": ["{{base_url}}"],
              "path": ["api", "games", "1"]
            }
          }
        },
        {
          "name": "Get Games by Result",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET GAMES BY RESULT ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get games by result', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/games/result/ONGOING",
              "host": ["{{base_url}}"],
              "path": ["api", "games", "result", "ONGOING"]
            }
          }
        },
        {
          "name": "Get Games by Time Control",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET GAMES BY TIME CONTROL ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get games by time control', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/games/time-control/BLITZ",
              "host": ["{{base_url}}"],
              "path": ["api", "games", "time-control", "BLITZ"]
            }
          }
        }
      ]
    },
    {
      "name": "üéØ 4. MOVE ENDPOINTS",
      "item": [
        {
          "name": "Get All Moves",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET ALL MOVES ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get all moves', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/moves",
              "host": ["{{base_url}}"],
              "path": ["api", "moves"]
            }
          }
        },
        {
          "name": "Create Move (WITH JWT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== CREATE MOVE ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Create move', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": 1,\n  \"moveNumber\": 1,\n  \"fromSquare\": \"e2\",\n  \"toSquare\": \"e4\",\n  \"piece\": \"PAWN\",\n  \"algebraicNotation\": \"e4\",\n  \"isWhiteMove\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/moves",
              "host": ["{{base_url}}"],
              "path": ["api", "moves"]
            }
          }
        },
        {
          "name": "Get Moves by Game",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET MOVES BY GAME ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get moves by game', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/moves/game/1",
              "host": ["{{base_url}}"],
              "path": ["api", "moves", "game", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "üèÜ 5. TOURNAMENT ENDPOINTS",
      "item": [
        {
          "name": "Get All Tournaments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET ALL TOURNAMENTS ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get all tournaments', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tournaments",
              "host": ["{{base_url}}"],
              "path": ["api", "tournaments"]
            }
          }
        },
        {
          "name": "Create Tournament (WITH JWT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== CREATE TOURNAMENT ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Create tournament', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Tournament {{$timestamp}}\",\n  \"description\": \"Tournament for testing\",\n  \"startDate\": \"2025-07-01T10:00:00\",\n  \"endDate\": \"2025-07-03T18:00:00\",\n  \"maxParticipants\": 16,\n  \"tournamentType\": \"SWISS\",\n  \"timeControl\": \"RAPID\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tournaments",
              "host": ["{{base_url}}"],
              "path": ["api", "tournaments"]
            }
          }
        }
      ]
    },
    {
      "name": "üí¨ 6. COMMENT ENDPOINTS",
      "item": [
        {
          "name": "Get All Comments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET ALL COMMENTS ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get all comments', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "comments"]
            }
          }
        },
        {
          "name": "Create Comment (WITH JWT)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== CREATE COMMENT ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Create comment', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": 1,\n  \"content\": \"Great opening move!\",\n  \"moveNumber\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "comments"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä 7. RANKING ENDPOINTS",
      "item": [
        {
          "name": "Get All Rankings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET ALL RANKINGS ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get all rankings', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/rankings",
              "host": ["{{base_url}}"],
              "path": ["api", "rankings"]
            }
          }
        }
      ]
    },
    {
      "name": "ü§ñ 8. AI ENDPOINTS",
      "item": [
        {
          "name": "Test Mistral Chat",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== MISTRAL CHAT ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Mistral chat', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403, 500]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"What is the best opening move in chess?\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mistral/chat",
              "host": ["{{base_url}}"],
              "path": ["api", "mistral", "chat"]
            }
          }
        },
        {
          "name": "Test Chess Analysis",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== CHESS ANALYSIS ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Chess analysis', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403, 500]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"position\": \"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1\",\n  \"moves\": [\"e4\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mistral/analyze",
              "host": ["{{base_url}}"],
              "path": ["api", "mistral", "analyze"]
            }
          }
        }
      ]
    },
    {
      "name": "üîç 9. SEARCH & FILTER ENDPOINTS",
      "item": [
        {
          "name": "Search Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== SEARCH USERS ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Search users', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/search?query=admin",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "admin"
                }
              ]
            }
          }
        },
        {
          "name": "Get Users by Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET USERS BY ROLE ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get users by role', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/role/ADMIN",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "role", "ADMIN"]
            }
          }
        }
      ]
    },
    {
      "name": "üìà 10. STATS ENDPOINTS",
      "item": [
        {
          "name": "Get User Stats by Role",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('=== GET USER STATS ===');",
                  "console.log('Status:', pm.response.code);",
                  "console.log('Response:', pm.response.text());",
                  "",
                  "pm.test('Get user stats', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/stats/role/USER",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "stats", "role", "USER"]
            }
          }
        }
      ]
    }
  ]
}