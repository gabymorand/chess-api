package com.chesslearning.chess_api.service;

import com.chesslearning.chess_api.dto.MistralRequestDTO;
import com.chesslearning.chess_api.dto.MistralResponseDTO;
import com.chesslearning.chess_api.entity.Game;
import com.chesslearning.chess_api.entity.Move;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class MistralService {

    private static final Logger logger = LoggerFactory.getLogger(MistralService.class);

    @Autowired
    private WebClient mistralWebClient;

    @Autowired
    private GameService gameService;

    @Autowired
    private MoveService moveService;

    @Value("${mistral.model:mistral-small}")
    private String defaultModel;

    @Value("${mistral.api.key}")
    private String apiKey;

    @Value("${mistral.api.url}")
    private String apiUrl;

    /**
     * Chat principal avec Mistral AI
     */
    public Mono<String> chatWithMistral(String userMessage) {
        logger.info("üöÄ D√©but communication avec Mistral AI");
        logger.info("üì§ Message utilisateur: {}", userMessage);
        logger.info("üîë API Key pr√©sente: {}", apiKey != null && !apiKey.isEmpty() ? "‚úÖ OUI" : "‚ùå NON");
        logger.info("üåê API URL: {}", apiUrl);
        logger.info("ü§ñ Mod√®le utilis√©: {}", defaultModel);

        // V√©rification de la cl√© API
        if (apiKey == null || apiKey.isEmpty() || "l3WguwUpqE0xYijOoNq6LzxqtlFhEAnv".equals(apiKey)) {
            logger.error("‚ùå ERREUR: Cl√© API Mistral non configur√©e ou invalide!");
            return Mono.just("Erreur: Cl√© API Mistral non configur√©e. Veuillez configurer MISTRAL_API_KEY.");
        }
        
        String systemPrompt = """
            Tu es un expert en √©checs, passionn√© et p√©dagogue. 
            Tu aides les joueurs √† am√©liorer leur jeu en expliquant les concepts d'√©checs de mani√®re claire et accessible.
            R√©ponds en fran√ßais sauf si on te demande ou te pose la question dans une autre langue et sois enthousiaste mais concis.
            """;

        MistralRequestDTO request = new MistralRequestDTO(
                defaultModel,
                Arrays.asList(
                        new MistralRequestDTO.Message("system", systemPrompt),
                        new MistralRequestDTO.Message("user", userMessage)
                ),
                500,
                0.7
        );

        logger.info("üìã Requ√™te pr√©par√©e: Model={}, Messages={}", request.getModel(), request.getMessages().size());

        return mistralWebClient
                .post()
                .uri("/chat/completions")
                .body(Mono.just(request), MistralRequestDTO.class)
                .retrieve()
                .bodyToMono(MistralResponseDTO.class)
                .doOnNext(response -> logger.info("‚úÖ R√©ponse re√ßue de Mistral AI"))
                .map(response -> {
                    if (response.getChoices() != null && !response.getChoices().isEmpty()) {
                        String content = response.getChoices().get(0).getMessage().getContent();
                        logger.info("üí¨ Contenu de la r√©ponse: {}...", content.substring(0, Math.min(100, content.length())));
                        return content;
                    }
                    logger.warn("‚ö†Ô∏è Aucun choix dans la r√©ponse Mistral");
                    return "D√©sol√©, je n'ai pas pu traiter votre demande.";
                })
                .doOnError(error -> {
                    logger.error("‚ùå Erreur lors de la communication avec Mistral AI: ", error);
                    logger.error("üîç Type d'erreur: {}", error.getClass().getSimpleName());
                    logger.error("üìù Message d'erreur: {}", error.getMessage());
                    
                    if (error instanceof WebClientResponseException) {
                        WebClientResponseException webError = (WebClientResponseException) error;
                        logger.error("üåê Code HTTP: {}", webError.getStatusCode());
                        logger.error("üìÑ Corps de la r√©ponse: {}", webError.getResponseBodyAsString());
                    }
                })
                .onErrorReturn("Erreur lors de la communication avec Mistral AI.");
    }

    /**
     * Analyse compl√®te d'une partie d'√©checs
     */
    public Mono<String> analyzeGame(Long gameId) {
        logger.info("üîç Analyse du jeu ID: {}", gameId);
        
        Optional<Game> gameOptional = gameService.getGameById(gameId);
        
        if (gameOptional.isPresent()) {
            Game game = gameOptional.get();
            Pageable pageable = PageRequest.of(0, 1000);
            Page<Move> movesPage = moveService.getMovesByGame(game, pageable);
            List<Move> moves = movesPage.getContent();
            String pgn = generatePGN(moves);
            
            String analysisPrompt = String.format("""
                Analyse cette partie d'√©checs en d√©tail :
                
                Joueur Blanc: %s
                Joueur Noir: %s
                R√©sultat: %s
                Nombre de coups: %d
                
                PGN des coups:
                %s
                
                Donne une analyse compl√®te incluant :
                1. Les moments cl√©s de la partie
                2. Les erreurs tactiques importantes
                3. Les points forts de chaque joueur
                4. Des conseils d'am√©lioration
                
                R√©ponds en fran√ßais de mani√®re structur√©e et p√©dagogique.
                """,
                game.getPlayerWhite() != null ? game.getPlayerWhite().getUsername() : "Anonyme",
                game.getPlayerBlack() != null ? game.getPlayerBlack().getUsername() : "Anonyme", 
                game.getResult() != null ? game.getResult().toString() : "En cours",
                moves.size(),
                pgn
            );

            return chatWithMistral(analysisPrompt);
        } else {
            logger.warn("‚ö†Ô∏è Partie non trouv√©e: {}", gameId);
            return Mono.just("Partie non trouv√©e.");
        }
    }

    /**
     * Suggestion de coup optimal
     */
    public Mono<String> suggestMove(Long gameId, String currentPosition) {
        logger.info("üí° Suggestion de coup pour le jeu ID: {}", gameId);
        
        Optional<Game> gameOptional = gameService.getGameById(gameId);
        
        if (gameOptional.isPresent()) {
            Game game = gameOptional.get();
            Pageable pageable = PageRequest.of(0, 50); // Derniers 50 coups
            Page<Move> movesPage = moveService.getMovesByGame(game, pageable);
            List<Move> recentMoves = movesPage.getContent();
            String recentPgn = generatePGN(recentMoves);
            
            String prompt = String.format("""
                Sugg√®re le meilleur coup pour cette position d'√©checs:
                
                Position actuelle: %s
                Derniers coups de la partie:
                %s
                
                Analyse la position et recommande :
                1. Le meilleur coup en notation alg√©brique
                2. La raison tactique/strat√©gique
                3. Les variantes principales √† consid√©rer
                4. Les pi√®ges √† √©viter
                
                R√©ponds en fran√ßais de mani√®re claire et pr√©cise.
                """, currentPosition, recentPgn);

            return chatWithMistral(prompt);
        } else {
            logger.warn("‚ö†Ô∏è Partie non trouv√©e pour suggestion: {}", gameId);
            return Mono.just("Partie non trouv√©e.");
        }
    }

    /**
     * Explication d√©taill√©e d'un coup
     */
    public Mono<String> explainMove(String move, String position) {
        logger.info("üìù Explication du coup: {} en position: {}", move, position);
        
        String prompt = String.format("""
            Explique ce coup d'√©checs de mani√®re p√©dagogique :
            
            Coup jou√©: %s
            Position: %s
            
            Analyse et explique :
            1. L'objectif tactique/strat√©gique de ce coup
            2. Ses avantages imm√©diats
            3. Ses cons√©quences √† long terme
            4. Les risques potentiels
            5. Les alternatives possibles
            
            R√©ponds en fran√ßais de mani√®re claire et √©ducative.
            """, move, position);

        return chatWithMistral(prompt);
    }

    /**
     * G√©n√©ration de quiz tactiques
     */
    public Mono<String> generateChessQuiz(String difficulty) {
        logger.info("üß© G√©n√©ration d'un quiz niveau: {}", difficulty);
        
        String prompt = String.format("""
            G√©n√®re un probl√®me d'√©checs tactique de niveau %s.
            
            Format demand√© :
            üìã **POSITION**
            [Description de la position en notation alg√©brique ou FEN]
            
            ‚ùì **QUESTION**
            [Question tactique claire : "Les Blancs jouent et gagnent", "Mat en 2 coups", etc.]
            
            üéØ **OPTIONS**
            A) [Premier coup possible]
            B) [Deuxi√®me coup possible]  
            C) [Troisi√®me coup possible]
            
            ‚úÖ **SOLUTION**
            [Bonne r√©ponse avec explication d√©taill√©e]
            
            Assure-toi que le probl√®me soit :
            - Adapt√© au niveau %s
            - √âducatif et instructif
            - Avec une solution claire
            
            R√©ponds en fran√ßais.
            """, difficulty, difficulty);

        return chatWithMistral(prompt);
    }

    /**
     * Conseils personnalis√©s d'am√©lioration
     */
    public Mono<String> getImprovementTips(String playerStats) {
        logger.info("üìà Conseils d'am√©lioration bas√©s sur: {}", playerStats);
        
        String prompt = String.format("""
            Analyse ces statistiques d'un joueur d'√©checs et donne des conseils personnalis√©s :
            
            üìä **STATISTIQUES DU JOUEUR**
            %s
            
            Fournis des conseils structur√©s :
            
            üéØ **POINTS FORTS IDENTIFI√âS**
            [Ce que le joueur fait bien]
            
            ‚ö†Ô∏è **DOMAINES √Ä AM√âLIORER**
            [Faiblesses principales d√©tect√©es]
            
            üìö **PLAN D'ENTRA√éNEMENT**
            [Exercices et √©tudes recommand√©s]
            
            üèÜ **OBJECTIFS √Ä COURT TERME**
            [Buts r√©alisables sur 1-3 mois]
            
            üí° **CONSEILS PRATIQUES**
            [Astuces concr√®tes pour progresser]
            
            R√©ponds en fran√ßais de mani√®re motivante et constructive.
            """, playerStats);

        return chatWithMistral(prompt);
    }

    /**
     * Test de sant√© du service Mistral
     */
    public Mono<String> healthCheck() {
        logger.info("üè• Test de sant√© Mistral AI");
        return chatWithMistral("R√©ponds simplement 'Service Mistral op√©rationnel!' pour confirmer que tu fonctionnes.");
    }

    /**
     * G√©n√©ration de PGN √† partir d'une liste de coups
     */
    private String generatePGN(List<Move> moves) {
        if (moves == null || moves.isEmpty()) {
            return "Aucun coup enregistr√©.";
        }
        
        StringBuilder pgn = new StringBuilder();
        int moveNumber = 1;
        boolean isWhiteMove = true;
        
        List<Move> sortedMoves = moves.stream()
                .sorted((m1, m2) -> m1.getCreatedAt().compareTo(m2.getCreatedAt()))
                .collect(Collectors.toList());
        
        for (Move move : sortedMoves) {
            if (isWhiteMove) {
                pgn.append(moveNumber).append(". ");
                pgn.append(move.getMoveNotation()).append(" "); 
                isWhiteMove = false;
            } else {
                pgn.append(move.getMoveNotation()).append(" ");
                isWhiteMove = true;
                moveNumber++;
            }
        }
        
        return pgn.toString().trim();
    }


    public boolean isConfigurationValid() {
        boolean valid = apiKey != null && 
                       !apiKey.isEmpty() && 
                       !apiKey.equals("EDCi9Uvu4RWSKJ3kauFFyOKyPdXicOzX") &&
                       apiUrl != null && 
                       !apiUrl.isEmpty() &&
                       defaultModel != null && 
                       !defaultModel.isEmpty();
        
        logger.info("üîß Configuration Mistral valide: {}", valid ? "‚úÖ OUI" : "‚ùå NON");
        
        if (!valid) {
            logger.error("‚ùå Configuration Mistral invalide:");
            logger.error("   - API Key: {}", apiKey != null && !apiKey.isEmpty() ? "‚úÖ" : "‚ùå");
            logger.error("   - API URL: {}", apiUrl != null && !apiUrl.isEmpty() ? "‚úÖ" : "‚ùå");
            logger.error("   - Model: {}", defaultModel != null && !defaultModel.isEmpty() ? "‚úÖ" : "‚ùå");
        }
        
        return valid;
    }
}